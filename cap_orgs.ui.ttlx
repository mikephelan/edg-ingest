# baseURI: http://capabilities.company.com/cap_orgs
# imports: http://topbraid.org/swa
# prefix: cap_orgs

@prefix adminguide: <http://server.topbraidlive.org/doc/adminguide#> .
@prefix afn: <http://jena.hpl.hp.com/ARQ/function#> .
@prefix arg: <http://spinrdf.org/arg#> .
@prefix cap_orgs: <http://capabilities.company.com/cap_orgs#> .
@prefix cfg: <http://server.topbraidlive.org/web/2009/config#> .
@prefix charts: <http://uispin.org/charts#> .
@prefix composite: <http://www.topbraid.org/2007/05/composite.owl#> .
@prefix crosswalkprojects: <http://teamwork.topbraidlive.org/crosswalkprojects#> .
@prefix css: <http://uispin.org/css#> .
@prefix daml: <http://www.daml.org/2001/03/daml+oil#> .
@prefix dash: <http://datashapes.org/dash#> .
@prefix datatype: <http://qudt.org/vocab/datatype/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix dcam: <http://purl.org/dc/dcam/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix default: <http://uispin.org/default#> .
@prefix dtype: <http://www.linkedmodel.org/schema/dtype#> .
@prefix edg: <http://edg.topbraid.solutions/model/> .
@prefix edg.glossary: <http://edg.topbraid.solutions/glossary/> .
@prefix edg.sqoop: <http://edg.topbraid.solutions/model/sqoop/> .
@prefix edg.v: <http://edg.topbraid.solutions/view/> .
@prefix email: <http://topbraid.org/email#> .
@prefix fn: <http://www.w3.org/2005/xpath-functions#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix geo: <http://www.w3.org/2003/01/geo/wgs84_pos#> .
@prefix graphql: <http://datashapes.org/graphql#> .
@prefix html: <http://uispin.org/html#> .
@prefix imported: <http://topbraid.org/imported#> .
@prefix json: <http://topbraid.org/json#> .
@prefix let: <http://uispin.org/let#> .
@prefix letrs: <http://uispin.org/letrs#> .
@prefix list: <http://jena.hpl.hp.com/ARQ/list#> .
@prefix metadata: <http://topbraid.org/metadata#> .
@prefix corgs: <https://schema.company.com/ontologies/corgs#> .
@prefix ontologyprojects: <http://teamwork.topbraidlive.org/ontologyprojects#> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix provo: <http://www.w3.org/ns/prov#> .
@prefix quantity: <http://qudt.org/vocab/quantity/> .
@prefix qudd: <http://qudt.org/schema/datastructure/> .
@prefix quds: <http://qudt.org/schema/datastructure/> .
@prefix qudt: <http://qudt.org/schema/qudt/> .
@prefix qudt-refdata: <http://qudt.org/vocab/refdata/> .
@prefix qudt.type: <http://qudt.org/vocab/type/> .
@prefix raci: <http://topbraid.org/raci#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rdm: <http://rdm.topbraidlive.org/rdm/> .
@prefix rdmfact: <http://topbraid.org/rdmfact#> .
@prefix rdmprojects: <http://rdm.topbraidlive.org/rdmprojects#> .
@prefix sd: <http://www.w3.org/ns/sparql-service-description#> .
@prefix search: <http://topbraid.org/search#> .
@prefix search.spin: <http://topbraid.org/search.spin#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix sioc: <http://rdfs.org/sioc/ns#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix skosapp: <http://evn.topbraidlive.org/uiplugins#> .
@prefix skosshapes: <http://topbraid.org/skos.shapes#> .
@prefix skostemplate: <http://topbraid.org/spin/skostemplates#> .
@prefix skosxl: <http://www.w3.org/2008/05/skos-xl#> .
@prefix sm: <http://topbraid.org/sparqlmotion#> .
@prefix smf: <http://topbraid.org/sparqlmotionfunctions#> .
@prefix sml: <http://topbraid.org/sparqlmotionlib#> .
@prefix softwareprojects: <http://teamwork.topbraidlive.org/software/softwareprojects#> .
@prefix solr: <http://topbraid.org/solr#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix sparqlmotionlib-swp: <http://topbraid.org/sparqlmotionlib-swp#> .
@prefix sparqlmotionlib-tbc: <http://topbraid.org/sparqlmotionlib-tbc#> .
@prefix spell: <http://topbraid.org/spellcheckresults#> .
@prefix spif: <http://spinrdf.org/spif#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix spl: <http://spinrdf.org/spl#> .
@prefix spl-dynamic-ranges: <http://spinrdf.org/spl-dynamic-ranges#> .
@prefix spr: <http://spinrdf.org/spr#> .
@prefix spra: <http://spinrdf.org/spra#> .
@prefix style: <http://uispin.org/style#> .
@prefix svg: <http://uispin.org/svg#> .
@prefix swa: <http://topbraid.org/swa#> .
@prefix swaclasses: <http://topbraid.org/swaclasses#> .
@prefix swaeditor: <http://topbraid.org/swaeditor#> .
@prefix swaowl: <http://topbraid.org/swaowl#> .
@prefix swash: <http://topbraid.org/swash#> .
@prefix swashacl: <http://topbraid.org/swashacl#> .
@prefix swauml: <http://topbraid.org/swauml#> .
@prefix swon: <http://uispin.org/swon#> .
@prefix sxml: <http://topbraid.org/sxml#> .
@prefix tables: <http://topbraid.org/tables#> .
@prefix taggerprojects: <http://evn.topbraidlive.org/taggerprojects#> .
@prefix task: <http://topbraid.org/task#> .
@prefix tasks: <http://topbraid.org/tasks#> .
@prefix taxonomies: <http://evn.topbraidlive.org/evnprojects#> .
@prefix tbl: <http://topbraidlive.org/functions#> .
@prefix teamwork: <http://topbraid.org/teamwork#> .
@prefix technical_capability_areas_3: <https://schema.company.com/ontologies/capabilities#> .
@prefix tops: <http://www.topbraid.org/tops#> .
@prefix tosh: <http://topbraid.org/tosh#> .
@prefix tosh.ui: <http://topbraid.org/tosh.ui#> .
@prefix ui: <http://uispin.org/ui#> .
@prefix uix: <http://topbraidlive.org/uix#> .
@prefix unit: <http://qudt.org/vocab/unit/> .
@prefix vaem: <http://www.linkedmodel.org/schema/vaem#> .
@prefix voag: <http://voag.linkedmodel.org/voag/> .
@prefix vs: <http://www.w3.org/2003/06/sw-vocab-status/ns#> .
@prefix wot: <http://xmlns.com/wot/0.1/> .
@prefix xlink: <http://www.w3.org/1999/xlink#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://capabilities.company.com/cap_orgs>
  a owl:Ontology ;
  owl:imports <http://topbraid.org/swa> ;
  owl:versionInfo "Created with TopBraid Composer" ;
.
cap_orgs:jitterPause
  a ui:NodeClass ;
  ui:prototype """
<ui:group let:jitterPause=\"{= xsd:integer(round((RAND() * 100))) }\">
    <ui:log ui:info=\"At start of jitter sleep job\"/>
    <ui:log ui:info=\"jitterPause: {= ?jitterPause }\"/>
    <ui:task ui:taskName=\"Sleeping\" ui:totalWork=\"{= 1000 }\">
        <ui:forEach ui:resultSet=\"{#
                SELECT ?i
                WHERE {
                    ?i tops:for ( 1 ?jitterPause ) .
                } }\">
            <ui:subTask ui:subTaskName=\"chunk {= ?i }\" ui:work=\"{= 1 }\">
                <ui:group let:message=\"{= smf:trace(&quot;Cycle {?i}&quot;) }\"/>
            </ui:subTask>
        </ui:forEach>
    </ui:task>
    <ui:log ui:info=\"At end of sleep job\"/>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "EDS-ORG" ;
  rdfs:subClassOf ui:Operations ;
.
cap_orgs:transientFaultRetry
  a ui:NodeClass ;
  spin:constraint [
      a spl:Argument ;
      spl:defaultValue "?transientFaultRetryCount"^^xsd:integer ;
      spl:predicate cap_orgs:transientFaultRetryCount ;
      spl:valueType xsd:integer ;
    ] ;
  spin:constraint [
      a spl:Argument ;
      spl:predicate cap_orgs:transientFaultRetryMaxCount ;
      spl:valueType xsd:integer ;
    ] ;
  ui:prototype """
<ui:group let:corgs=\"{= IRI(&quot;urn:x-evn-master:company_organizations&quot;) }\">
    <ui:log ui:info=\"transientFaultRetry hrOrgsComplete condition value !(ui:globalVarValue(&quot;hrOrgsComplete&quot;)): {= !(ui:globalVarValue(&quot;hrOrgsComplete&quot;) = &quot;true&quot;) }\"/>
    <ui:log ui:info=\"transientFaultRetry hrOrgsComplete condition value !(?transientFaultRetryCount &gt; ?transientFaultRetryMaxCount): {= !(?transientFaultRetryCount &gt; ?transientFaultRetryMaxCount) }\"/>
    <ui:if ui:condition=\"{= (!(ui:globalVarValue(&quot;hrOrgsComplete&quot;) = &quot;true&quot;)) &amp;&amp; (!(?transientFaultRetryCount &gt; ?transientFaultRetryMaxCount)) }\">
        <ui:log ui:info=\"transientFaultRetry outer loop condition true, proceeding with if code\"/>
        <ui:setContext ui:queryGraph=\"{= ui:graphWithImports(?corgs) }\">
            <ui:task ui:taskName=\"updateHROrgGraphTrans\" ui:totalWork=\"{= 180000 }\">
                <ui:subTask ui:subTaskName=\"getHROrgData\" ui:work=\"{= 180000 }\">
                    <ui:log ui:info=\"getHROrgData start\"/>
                    <sml:ImportTextFromURL sm:outputVariable=\"text\" sml:url=\"http://datasvc.company.com/wisd-rest/HROrganization/HROrganization/getHROrganizations\">
                        <ui:setGlobalVar ui:name=\"hrOrgs\" ui:value=\"{= ?text }\"/>
                        <ui:if ui:condition=\"{= STRLEN(ui:globalVarValue(&quot;hrOrgs&quot;)) &gt; 0 }\">
                            <ui:json ui:str=\"{= ?text }\" ui:varName=\"json\">
                                <ui:subTask ui:subTaskName=\"putHROrgData\" ui:work=\"{= 180000 }\">
                                    <ui:log ui:info=\"update of ontology start\"/>
                                    <ui:setContext ui:queryGraph=\"{= ?corgs }\">
                                        <ui:transaction>
                                            <ui:update ui:updateQuery=\"{!
                                                    INSERT {
                                                        ?division a corgs:HRDivisions .
                                                        ?division rdfs:label ?orgString .
                                                    }
                                                    WHERE {
                                                        BIND (ui:jsonValue(?json, &quot;results&quot;) AS ?array) .
                                                        ?array ui:jsonArrayMembers ?object .
                                                        BIND (ui:jsonValue(?object, &quot;org_id&quot;) AS ?orgID) .
                                                        BIND (ui:jsonString(?orgID) AS ?orgString) .
                                                        BIND (spif:buildURI(&quot;https://schema.company.com/ontologies/corgs#{?orgString}&quot;) AS ?division) .
                                                    } }\"/>
                                        </ui:transaction>
                                        <ui:setGlobalVar ui:name=\"hrOrgsComplete\" ui:value=\"true\"/>
                                    </ui:setContext>
                                    <ui:log ui:info=\"update of ontology finish\"/>
                                </ui:subTask>
                            </ui:json>
                        </ui:if>
                        <ui:else>
                            <ui:log ui:error=\"getHROrgData result was empty\"/>
                            <p>Recursive call to TransientFaultRetry</p>
                            <cap_orgs:jitterPause/>
                            <cap_orgs:transientFaultRetry cap_orgs:transientFaultRetryCount=\"{= ?transientFaultRetryCount + 1 }\" cap_orgs:transientFaultRetryMaxCount=\"{= 3 }\"/>
                        </ui:else>
                    </sml:ImportTextFromURL>
                    <ui:log ui:info=\"getHROrgData finish\"/>
                </ui:subTask>
            </ui:task>
        </ui:setContext>
        <h3>Update Complete</h3>
    </ui:if>
    <ui:else>
        <ui:log ui:info=\"transientFaultRetry outer else transientFaultRetryCount=&quot;{= ?transientFaultRetryCount }&quot;\"/>
        <ui:log ui:info=\"transientFaultRetry outer else TransientFaultRetryMaxCount=&quot;{= ?transientFaultRetryMaxCount }&quot;\"/>
        <ui:log ui:info=\"transientFaultRetry outer else hrOrgs GlobalVarValue={= ui:globalVarValue(&quot;hrOrgs&quot;) }\"/>
        <ui:log ui:info=\"transientFaultRetry outer else hrOrgsComplete GlobalVarValue={= ui:globalVarValue(&quot;hrOrgsComplete&quot;) }\"/>
        <p>hrOrgs: \"{= ui:globalVarValue(\"hrOrgs\") }\"</p>
        <p>TransientFaultRetry outer else completed</p>
    </ui:else>
</ui:group>
"""^^ui:Literal ;
  rdfs:label "DATASVC-ORG" ;
  rdfs:subClassOf ui:Operations ;
.
cap_orgs:transientFaultRetryCount
  a rdf:Property ;
  rdfs:label "DATASVC-ORG" ;
.
cap_orgs:transientFaultRetryMaxCount
  a rdf:Property ;
  rdfs:label "DATASVC-ORG" ;
.
cap_orgs:updateCapOrgs
  a ui:Service ;
  ui:prototype """
<ui:group>
    <ui:if ui:condition=\"{= ui:globalVarValue(&quot;hrOrgsComplete&quot;) = &quot;true&quot; }\">
        <ui:log ui:info=\"updateCapOrgs hrOrgsComplete={= ui:globalVarValue(&quot;hrOrgsComplete&quot;) }\"/>
        <ui:log ui:info=\"hrOrgsComplete was true, ending\"/>
        <h3>Update Complete</h3>
    </ui:if>
    <ui:else>
        <ui:setGlobalVar ui:name=\"hrOrgsComplete\" ui:value=\"false\"/>
        <p>Call to TransientFaultRetry</p>
        <cap_orgs:jitterPause/>
        <cap_orgs:transientFaultRetry cap_orgs:transientFaultRetryCount=\"{= 1 }\" cap_orgs:transientFaultRetryMaxCount=\"{= 3 }\"/>
    </ui:else>
    <ui:log ui:info=\"getHROrgData finish\"/>
</ui:group>
"""^^ui:Literal ;
  ui:responseType ui:HTML ;
  rdfs:label "DATASVC-ORG" ;
  rdfs:subClassOf ui:Services ;
.
